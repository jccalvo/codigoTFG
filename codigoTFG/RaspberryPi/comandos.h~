/**  @file comandos.h
  * 
  *  @brief Fichero que contiene las cabeceras de las funciones para
  *         generar el comando que desea enviarse al aire acondicionado,
  *         a partir de la señal obtenida a la salida del controlador PID.
  *
  *  @author Juan Carlos Calvo Sansegundo.    
  *  @date 30/10/2016.
  */

#ifndef COMANDOS_H
#define COMANDOS_H 

#include <stdio.h>
#include <stdlib.h>

/**
  * Factor para convertir la temperatura de milésimas a unidades.
  */

#define FACT_CONV 1000      

/**
  * Máxima temperatura aceptada por el aire acondicionado.
  */

#define TEMP_MAXIMA_AC 32    

/**
  * Mínima temperatura aceptada por el aire acondicionado.
  */

#define TEMP_MINIMA_AC 18   

/**
  * Valor para establecer un redondeo con precisión de centésimas.
  */

#define LIMITE_REDONDEO 500  

/**
  * Formato de nombre de los ficheros que contienen los comandos.
  */

#define URL_FORMAT_FILE "env_tramas/tramas/trama%d.txt"

/**
  * Tamaño máximo permitido del nombre del fichero.
  */

#define URL_SIZE_FILE 50

/** 
  * Máscara usada para la conversión de caracteres a bits.
  */

#define MASCARA_BITS 0x80

/** 
  * Número de bits que contiene la cabecera de cada comando.
  */

#define BITS_CABECERA 80

/** 
  * Caracter que representa el bit 0.
  */

#define CHAR_0 '0'

/** 
  * Caracter que representa el bit 1.
  */

#define CHAR_1 '1'

/** @struct buf_salida
  * 
  * @brief Estructura que contiene el comando a enviar por el infrarrojos.
  *
  * @author Juan Carlos Calvo Sansegundo.    
  * @date 05/11/2016.
  */

struct buf_salida {
    unsigned char* datos; /**< Puntero de tipo char a la dirección de inicio del comando.*/
    int posicion;         /**< Número de posiciones que ocupa el comando.*/
};

/** @fn int seleccionar_comando(int temp_sal_PID).
  *
  * @brief Esta función coge el resultado obtenido a la salida del controlador 
  * 	   y establece una correspondencia de dicho valor, con los posibles valores
  *        de temperatura que dispone el aire acondicionado.
  * 
  * @param temp_sal_PID. Temperatura de salida del controlador PID en centésimas.
  * @return Un valor de temperatura dentro del rango aceptado por el aire acondicionado.
  *
  * @author Juan Carlos Calvo Sansegundo.    
  * @date 30/10/2016.
  */

int seleccionar_comando(int temp_sal_PID);


/** @fn FILE* elegir_fichero(int temperatura, FILE *f)
  *
  * @brief Esta función se encarga de generar el nombre del fichero que 
  *        almacena el comando a enviar, de acuerdo con la temperatura
  *        generada por el controlador PID.
  *
  * @param temperatura. Temperatura a la que hay que poner el aire acondicionado.
  * @param f. Puntero de tipo file usado para abrir el comando de temperatura.
  * @return Un puntero de tipo FILE con el comando seleccionado. 
  *
  * @author Juan Carlos Calvo Sansegundo.   
  * @date 30/10/2016.
  */


FILE* elegir_fichero(int temperatura,FILE *f);
  
/** @fn buf_salida * crear_comando(int temperatura).
  *
  * @brief Esta función coge el fichero de texto asociado
  *        la temperatura obtenida,genera el comando y lo transmite 
  *        al módulo de infrarrojos.
  *  
  * @param temperatura. Contiene la temperatura a enviar.
  * @return Un struct de tipo buf_salida con el comando generado.
  *
  * @author Juan Carlos Calvo Sansegundo.    
  * @date 30/10/2016.
  */

struct buf_salida* crear_comando(int temperatura);

#endif
