/***********************************************************************************
Filename:     raspi_base.c
Description:  Sends selected data from user to the Tulio in order to be setup in 
			  the air conditioner via radio.
Important:    Note that these pins run at 3.3V and the RS232 specification is for 
			  12V. If you connect this to a RS232 serial device, you could 
			  potentially damage your Raspberry Pi. 
***********************************************************************************/

#include <stdio.h>
#include <unistd.h>			//Used for UART
#include <fcntl.h>			//Used for UART
#include <termios.h>		//Used for UART
#include <errno.h>


int main(int argc, char *argv[]) {   
   //-------------------------
   //----- SETUP USART 0 -----
   //-------------------------
   //At bootup, pins 8 and 10 are already set to UART0_TXD, UART0_RXD (ie the alt0 function) respectively
   int uart0_filestream = -1;
   unsigned char tx_buffer[700];
   unsigned char *p_tx_buffer;
   int i; 
   int palabras;
   struct termios options;
   unsigned int speed = B115200;

   //OPEN THE UART
   //The flags (defined in fcntl.h):
   //OPEN THE UART
   //The flags (defined in fcntl.h):
   //	Access modes (use 1 of these):
   //		O_RDONLY - Open for reading only.
   //		O_RDWR - Open for reading and writing.
   //		O_WRONLY - 
   //	Access modes (use 1 of these):
   //		O_RDONLY - Open for reading only.
   //		O_RDWR - Open for reading and writing.
   //		O_WRONLY - Open for writing only.
   //
   //	O_NDELAY / O_NONBLOCK (same function) - Enables nonblocking mode.
   //        When set read requests on the file can return immediately with a failure status
   //	     if there is no input immediately available (instead of blocking).
   //        Likewise, write requests can also return inmediately with a failure status
   //        if the output can't be written immediately.
   //
   //	O_NOCTTY - When set and path identifies a terminal device, open() shall not
   //              cause the terminal device to become the controlling terminal for the process.

/*
   //   uart0_filestream = open("/dev/ttyAMA0", O_WRONLY | O_NOCTTY | O_NDELAY);		//Open in non blocking write mode
   uart0_filestream = open("/dev/ttyUSB0", O_RDWR | O_NOCTTY | O_NDELAY);		//Open in non blocking write mode
   if (uart0_filestream == -1)
   {
   	//ERROR - CAN'T OPEN SERIAL PORT
   	perror("Error - Unable to open UART.  Ensure it is not in use by another application\n");
   }

   //CONFIGURE THE UART
   //The flags (defined in /usr/include/termios.h - see http://pubs.opengroup.org/onlinepubs/007908799/xsh/termios.h.html):
   //	Baud rate:- B1200, B2400, B4800, B9600, B19200, B38400, B57600, B115200,
   //               B230400, B460800, B500000, B576000, B921600, B1000000, B1152000,
   //               B1500000, B2000000, B2500000, B3000000, B3500000, B4000000
   //	CSIZE:- CS5, CS6, CS7, CS8
   //	CLOCAL - Ignore modem status lines
   //	CREAD - Enable receiver
   //	IGNPAR = Ignore characters with parity errors
   //	ICRNL - Map CR to NL on input
   //	PARENB - Parity enable
   //	PARODD - Odd parity (else even)
   tcgetattr(uart0_filestream, &options);
   options.c_cflag = CS8 | CLOCAL | CREAD;		//<Set baud rate
   options.c_iflag = IGNBRK; //IGNPAR | ICRNL;
   options.c_oflag = 0;
   options.c_lflag = 0;

   cfsetospeed(&options, speed);
   cfsetispeed(&options, speed);   
 
   tcflush(uart0_filestream, TCIOFLUSH);
   tcsetattr(uart0_filestream, TCSANOW, &options);
*/
   //----- TX BYTES -----
   //tx_buffer[] = {header, header, header, header, header, header,
   //tbit1, tbit2(useg), carrier(kHz), data, data,...,end code}
   // unsigned char buffer[] = {0,0,0,0,0,0,    //TX header
   //                           0, 0x02, 0x13, 0x1A, 
   //                           0b01010001}; //Trama a enviar
   // palabras = sizeof(buffer)-10;
   // buffer[6] = palabras;
   /*unsigned char *p_tx_buffer;
   p_tx_buffer = &tx_buffer[0];
   *p_tx_buffer++ = 'H';
   *p_tx_buffer++ = 'e';
   *p_tx_buffer++ = 'l';
   *p_tx_buffer++ = 'l';
   *p_tx_buffer++ = 'o';*/


   if(argc!=2) {
       printf("introduzca el nombre del fichero con su extensiÃ³n.\n"); 
       return 0;
   }

   FILE *f;
   unsigned char buffer[1500];
   int n;

   f = fopen(argv[1], "rb");
   if (f) {
       n = fread(buffer, 1, sizeof(buffer), f);
       printf("n: %i\n", n);
   }
   else {  
       printf("ERROR\n");
       return 0;
   } 
   // int uart0_filestream = setup_usart ();           

   unsigned char mask = 0x80;
   unsigned char j = 0;

   printf("Tx_buffer: %x \n" ,tx_buffer[0]);

   for (i = 0; i < n; i++) {
       if (buffer[i] == '1') {
           tx_buffer[j] |= mask;
       } else if (buffer[i] == '0') {
           tx_buffer[j] &= ~mask;
       } else {
           break;
       }
       mask >>= 1;
       if (! mask) {
           j++;
           mask = 0x80;
       }
   } 
   tx_buffer[j++] = '\n';

   printf("%d\n",j);


   //   /* declare the file pointer */

   printf("New tx_buffer:\n ");
   for ( i = 0; i < j; i++) {
       printf (" posicion %d: 0x%x\n",i, tx_buffer[i]);

       if(i%10 ==0)
	 printf("\n");
   }

  /* if (uart0_filestream != -1){
       int count = write(uart0_filestream, tx_buffer,j);		//Filestream, bytes to write, number of bytes to write
       // int count = write(uart0_filestream, tx_buffer, j);    //Filestream, bytes to write, number of bytes to write
       if (count < 0){
           printf("UART TX error\n");
       }
   } 
   sync();
   fflush(stdout);
   sleep(1);

   //----- CLOSE THE UART -----
   close(uart0_filestream); */
}
